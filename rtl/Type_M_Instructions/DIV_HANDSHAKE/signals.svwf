
#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

#
# Conditions
#
set expression {tb.temp[31:0]}
if {[catch {condition new -name  {} -expr $expression}] != ""} {
    condition set -using {} -expr $expression
}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list {__assert_6 contributors}]}]} {
set createdGroup([list {__assert_6 contributors}]) 1
catch {group new -name {__assert_6 contributors} -overlay 0}
}
if {[catch {group get -using [list {__assert_5 contributors}]}]} {
set createdGroup([list {__assert_5 contributors}]) 1
catch {group new -name {__assert_5 contributors} -overlay 0}
}
if {[catch {group get -using [list {__assert_4 contributors}]}]} {
set createdGroup([list {__assert_4 contributors}]) 1
catch {group new -name {__assert_4 contributors} -overlay 0}
}
if {[catch {group get -using [list {__assert_3 contributors}]}]} {
set createdGroup([list {__assert_3 contributors}]) 1
catch {group new -name {__assert_3 contributors} -overlay 0}
}
if {[catch {group get -using [list {__assert_2 contributors}]}]} {
set createdGroup([list {__assert_2 contributors}]) 1
catch {group new -name {__assert_2 contributors} -overlay 0}
}
if {[catch {group get -using [list {__assert_1 contributors}]}]} {
set createdGroup([list {__assert_1 contributors}]) 1
catch {group new -name {__assert_1 contributors} -overlay 0}
}
if {[info exists createdGroup([list {__assert_6 contributors}])]} {
group using {__assert_6 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_6 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.out_valid_o}]} ] \
    [subst  {[format {tb.outstanding_tr}]} ] \
    [subst  {[format {tb.nreset}]} ]
}

if {[info exists createdGroup([list {__assert_5 contributors}])]} {
group using {__assert_5 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_5 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.out_valid_o}]} ] \
    [subst  {[format {tb.out_ready_i}]} ] \
    [subst  {[format {tb.c[31:0]}]} ] \
    [subst  {[format {tb.nreset}]} ]
}

if {[info exists createdGroup([list {__assert_4 contributors}])]} {
group using {__assert_4 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_4 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.out_valid_o}]} ] \
    [subst  {[format {tb.out_ready_i}]} ] \
    [subst  {[format {tb.nreset}]} ]
}

if {[info exists createdGroup([list {__assert_3 contributors}])]} {
group using {__assert_3 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_3 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.in_valid_i}]} ] \
    [subst  {[format {tb.in_ready_o}]} ] \
    [subst  {[format {tb.b[31:0]}]} ] \
    [subst  {[format {tb.nreset}]} ]
}

if {[info exists createdGroup([list {__assert_2 contributors}])]} {
group using {__assert_2 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_2 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.in_valid_i}]} ] \
    [subst  {[format {tb.in_ready_o}]} ] \
    [subst  {[format {tb.a[31:0]}]} ] \
    [subst  {[format {tb.nreset}]} ]
}

if {[info exists createdGroup([list {__assert_1 contributors}])]} {
group using {__assert_1 contributors}
group set -overlay 0
group set -comment {simulator::tb.__assert_1 contributors}
group clear 0 end
group insert \
    [subst  {[format {tb.clock}]} ] \
    [subst  {[format {tb.in_valid_i}]} ] \
    [subst  {[format {tb.in_ready_o}]} ]
}

set id [waveform add -signals [subst  {
	{[format {tb.nreset}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.clock}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.cnt_clks}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.cnt_dn}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.cnt_up}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.outstanding_tr}]}
	} ]]
set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {tb.in_ready_o}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.in_valid_i}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.a[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.b[31:0]}]}
	} ]]
set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {tb.c[31:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.out_ready_i}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {tb.out_valid_o}]}
	} ]]
set id [waveform add -cdivider divider]
set id [waveform add -signals [subst  {
	{[format {tb.temp2}]}
	} ]]

waveform xview limits 542ns 894ns
