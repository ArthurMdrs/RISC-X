diff --git a/cov.py b/cov.py
index e9e1a9c..e67ce44 100644
--- a/cov.py
+++ b/cov.py
@@ -16,12 +16,17 @@ limitations under the License.
 Regression script for RISC-V random instruction generator
 """
 
+# pyright: reportMissingImports=false, reportUndefinedVariable=false
+
 import argparse
 import os
 import re
 import sys
 import logging
 
+riscv_dv_root = os.environ.get('RISCV_DV_ROOT')
+sys.path.append(f'{riscv_dv_root}')
+
 from scripts.lib import *
 from scripts.spike_log_to_trace_csv import *
 from scripts.ovpsim_log_to_trace_csv import *
@@ -325,7 +330,9 @@ def main():
     try:
         parser = setup_parser()
         args = parser.parse_args()
-        cwd = os.path.dirname(os.path.realpath(__file__))
+        riscv_dv_root = os.environ.get('RISCV_DV_ROOT')
+        cwd = riscv_dv_root
+        # cwd = os.path.dirname(os.path.realpath(__file__))
         setup_logging(args.verbose)
         # Load configuration from the command line and the configuration file.
         cfg = load_config(args, cwd)
diff --git a/run.py b/run.py
index 5f364fc..5516ce5 100644
--- a/run.py
+++ b/run.py
@@ -16,6 +16,8 @@ limitations under the License.
 Regression script for RISC-V random instruction generator
 """
 
+# pyright: reportMissingImports=false, reportUndefinedVariable=false
+
 import argparse
 import os
 import random
@@ -23,13 +25,20 @@ import re
 import sys
 import logging
 
+# riscv_dv_root = os.environ.get('RISCV_DV_ROOT')
+# sys.path.append(f'{riscv_dv_root}')
+
 from scripts.lib import *
 from scripts.spike_log_to_trace_csv import *
+from scripts.riscx_log_to_trace_csv import *
 from scripts.ovpsim_log_to_trace_csv import *
 from scripts.whisper_log_trace_csv import *
 from scripts.sail_log_to_trace_csv import *
 from scripts.instr_trace_compare import *
 
+# from riscx_log_to_trace_csv import *
+
+
 from types import SimpleNamespace
 
 LOGGER = logging.getLogger()
@@ -190,6 +199,8 @@ def get_iss_cmd(base_cmd, elf, log):
       cmd      : Command for ISS simulation
     """
     cmd = re.sub("\<elf\>", elf, base_cmd)
+    bin = elf[:-2] + ".bin"
+    cmd = re.sub("\<bin\>", bin, cmd)
     cmd += (" &> {}".format(log))
     return cmd
 
@@ -422,6 +433,8 @@ def gcc_compile(test_list, output_dir, isa, mabi, opts, debug_cmd):
       mabi       : MABI variant passed to GCC
       debug_cmd  : Produce the debug cmd log without running
     """
+    # riscv_dv_root = os.environ.get('RISCV_DV_ROOT')
+    # cwd = riscv_dv_root
     cwd = os.path.dirname(os.path.realpath(__file__))
     for test in test_list:
         for i in range(0, test['iterations']):
@@ -461,6 +474,7 @@ def gcc_compile(test_list, output_dir, isa, mabi, opts, debug_cmd):
             if not re.search('mabi', cmd):
                 cmd += (" -mabi={}".format(mabi))
             logging.info("Compiling {}".format(asm))
+            # print(cmd)
             run_cmd_output(cmd.split(), debug_cmd=debug_cmd)
             # Convert the ELF to plain binary, used in RTL sim
             logging.info("Converting to {}".format(binary))
@@ -484,10 +498,11 @@ def run_assembly(asm_test, iss_yaml, isa, mabi, gcc_opts, iss_opts, output_dir,
       setting_dir : Generator setting directory
       debug_cmd   : Produce the debug cmd log without running
     """
-    if not asm_test.endswith(".S"):
+    if not (asm_test.endswith(".S") or asm_test.endswith(".s")):
         logging.error("{} is not an assembly .S file".format(asm_test))
         return
     cwd = os.path.dirname(os.path.realpath(__file__))
+    # cwd = os.environ.get('RISCV_DV_ROOT')
     asm_test = os.path.expanduser(asm_test)
     report = ("{}/iss_regr.log".format(output_dir)).rstrip()
     asm = re.sub(r"^.*\/", "", asm_test)
@@ -545,7 +560,8 @@ def run_assembly_from_dir(asm_test_dir, iss_yaml, isa, mabi, gcc_opts, iss,
       setting_dir     : Generator setting directory
       debug_cmd       : Produce the debug cmd log without running
     """
-    result = run_cmd("find {} -name \"*.S\"".format(asm_test_dir))
+    # result = run_cmd("find {} -name \"*.S\"".format(asm_test_dir))
+    result = run_cmd("find {} -maxdepth 1 \\( -name \"*.S\" -o -name \"*.s\" \\)".format(asm_test_dir))
     if result:
         asm_list = result.splitlines()
         logging.info("Found {} assembly tests under {}".format(
@@ -581,6 +597,7 @@ def run_c(c_test, iss_yaml, isa, mabi, gcc_opts, iss_opts, output_dir,
         logging.error("{} is not a .c file".format(c_test))
         return
     cwd = os.path.dirname(os.path.realpath(__file__))
+    # cwd = os.environ.get('RISCV_DV_ROOT')
     c_test = os.path.expanduser(c_test)
     report = ("{}/iss_regr.log".format(output_dir)).rstrip()
     c = re.sub(r"^.*\/", "", c_test)
@@ -602,6 +619,11 @@ def run_c(c_test, iss_yaml, isa, mabi, gcc_opts, iss_opts, output_dir,
     cmd += (" -march={}".format(isa))
     cmd += (" -mabi={}".format(mabi))
     run_cmd_output(cmd.split(), debug_cmd=debug_cmd)
+    
+    # result = subprocess.run(['ls',"/home/pedro.medeiros/Tools/RISC-X/tb/riscv-dv/mytest/directed_c_test"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    # print(result.stdout)
+    # logging.info("{}".format(result.stdout))
+    
     # Convert the ELF to plain binary, used in RTL sim
     logging.info("Converting to {}".format(binary))
     cmd = ("{} -O binary {} {}".format(
@@ -713,6 +735,8 @@ def iss_cmp(test_list, iss, output_dir, stop_on_first_error, exp, debug_cmd):
     report = ("{}/iss_regr.log".format(output_dir)).rstrip()
     run_cmd("rm -rf {}".format(report))
     for test in test_list:
+        # report = ("{}/cmp_{}.log".format(output_dir, test['test'])).rstrip()
+        # run_cmd("rm -rf {}".format(report))
         for i in range(0, test['iterations']):
             elf = ("{}/asm_test/{}_{}.o".format(output_dir, test['test'], i))
             logging.info("Comparing ISS sim result {}/{} : {}".format(
@@ -721,7 +745,7 @@ def iss_cmp(test_list, iss, output_dir, stop_on_first_error, exp, debug_cmd):
             run_cmd(("echo 'Test binary: {}' >> {}".format(elf, report)))
             for iss in iss_list:
                 log_list.append(
-                    "{}/{}_sim/{}.{}.log".format(output_dir, iss, test['test'], i))
+                    "{}/{}_sim/{}_{}.log".format(output_dir, iss, test['test'], i))
             compare_iss_log(iss_list, log_list, report, stop_on_first_error,
                             exp)
     save_regr_report(report)
@@ -740,6 +764,8 @@ def compare_iss_log(iss_list, log_list, report, stop_on_first_error=0,
             csv_list.append(csv)
             if iss == "spike":
                 process_spike_sim_log(log, csv)
+            elif iss == "risc-x":
+                process_riscx_sim_log(log, csv)
             elif iss == "ovpsim":
                 process_ovpsim_sim_log(log, csv, stop_on_first_error)
             elif iss == "sail":
@@ -754,12 +780,20 @@ def compare_iss_log(iss_list, log_list, report, stop_on_first_error=0,
         logging.info(result)
 
 
+# def save_regr_report(report):
+#     passed_cnt = run_cmd("grep PASSED {} | wc -l".format(report)).strip()
+#     failed_cnt = run_cmd("grep FAILED {} | wc -l".format(report)).strip()
+#     summary = ("{} PASSED, {} FAILED".format(passed_cnt, failed_cnt))
+#     logging.info(summary)
+#     run_cmd(("echo {} >> {}".format(summary, report)))
+#     logging.info("ISS regression report is saved to {}".format(report))
+    
 def save_regr_report(report):
-    passed_cnt = run_cmd("grep PASSED {} | wc -l".format(report)).strip()
-    failed_cnt = run_cmd("grep FAILED {} | wc -l".format(report)).strip()
-    summary = ("{} PASSED, {} FAILED".format(passed_cnt, failed_cnt))
+    passed_cnt = run_cmd("grep PASSED {} | grep -v '^# Summary:' | wc -l".format(report)).strip()
+    failed_cnt = run_cmd("grep FAILED {} | grep -v '^# Summary:' | wc -l".format(report)).strip()
+    summary = "# Summary: {} PASSED, {} FAILED".format(passed_cnt, failed_cnt)
     logging.info(summary)
-    run_cmd(("echo {} >> {}".format(summary, report)))
+    run_cmd("echo {} >> {}".format(summary, report))
     logging.info("ISS regression report is saved to {}".format(report))
 
 
@@ -1003,6 +1037,8 @@ def main():
     try:
         cwd = os.path.dirname(os.path.realpath(__file__))
         os.environ["RISCV_DV_ROOT"] = cwd
+        
+        # cwd = os.environ.get('RISCV_DV_ROOT')
 
         args = parse_args(cwd)
         setup_logging(args.verbose)
diff --git a/yaml/iss.yaml b/yaml/iss.yaml
index 1167d7f..3c9ff90 100644
--- a/yaml/iss.yaml
+++ b/yaml/iss.yaml
@@ -41,3 +41,11 @@
   path_var: RENODE_PATH
   cmd: >
     python3 <scripts_path>/renode_wrapper.py --renode "<path_var>" --elf <elf> --isa <variant> --priv=<priv> --mem-size 0x80000000
+
+
+
+- iss: risc-x
+  path_var: RISC_X_PATH
+  riscv_dv_path: RISCV_DV_PATH
+  cmd: >
+    make -C <path_var> sim-elf ELF=<elf> BIN=<bin>
